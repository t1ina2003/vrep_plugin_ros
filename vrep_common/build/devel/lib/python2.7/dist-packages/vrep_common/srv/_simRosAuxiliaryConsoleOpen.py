"""autogenerated by genpy from vrep_common/simRosAuxiliaryConsoleOpenRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class simRosAuxiliaryConsoleOpenRequest(genpy.Message):
  _md5sum = "b11b7ee0194549fd289229f6b0fe6c7a"
  _type = "vrep_common/simRosAuxiliaryConsoleOpenRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """



string title
int32 maxLines
int32 mode
int32[] position
int32[] size
float32[] textColor
float32[] backgroundColor

"""
  __slots__ = ['title','maxLines','mode','position','size','textColor','backgroundColor']
  _slot_types = ['string','int32','int32','int32[]','int32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       title,maxLines,mode,position,size,textColor,backgroundColor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(simRosAuxiliaryConsoleOpenRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.title is None:
        self.title = ''
      if self.maxLines is None:
        self.maxLines = 0
      if self.mode is None:
        self.mode = 0
      if self.position is None:
        self.position = []
      if self.size is None:
        self.size = []
      if self.textColor is None:
        self.textColor = []
      if self.backgroundColor is None:
        self.backgroundColor = []
    else:
      self.title = ''
      self.maxLines = 0
      self.mode = 0
      self.position = []
      self.size = []
      self.textColor = []
      self.backgroundColor = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.title
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.maxLines, _x.mode))
      length = len(self.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.position))
      length = len(self.size)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.size))
      length = len(self.textColor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.textColor))
      length = len(self.backgroundColor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.backgroundColor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.title = str[start:end].decode('utf-8')
      else:
        self.title = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.maxLines, _x.mode,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.size = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.textColor = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.backgroundColor = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.title
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.maxLines, _x.mode))
      length = len(self.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.position.tostring())
      length = len(self.size)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.size.tostring())
      length = len(self.textColor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.textColor.tostring())
      length = len(self.backgroundColor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.backgroundColor.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.title = str[start:end].decode('utf-8')
      else:
        self.title = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.maxLines, _x.mode,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.position = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.size = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.textColor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.backgroundColor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i = struct.Struct("<2i")
"""autogenerated by genpy from vrep_common/simRosAuxiliaryConsoleOpenResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class simRosAuxiliaryConsoleOpenResponse(genpy.Message):
  _md5sum = "0712f8f971970cd49793e7755140f018"
  _type = "vrep_common/simRosAuxiliaryConsoleOpenResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 consoleHandle



"""
  __slots__ = ['consoleHandle']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       consoleHandle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(simRosAuxiliaryConsoleOpenResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.consoleHandle is None:
        self.consoleHandle = 0
    else:
      self.consoleHandle = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.consoleHandle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.consoleHandle,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.consoleHandle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.consoleHandle,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class simRosAuxiliaryConsoleOpen(object):
  _type          = 'vrep_common/simRosAuxiliaryConsoleOpen'
  _md5sum = 'f861a9b4fa1cfe42d343017f3c8914a5'
  _request_class  = simRosAuxiliaryConsoleOpenRequest
  _response_class = simRosAuxiliaryConsoleOpenResponse
