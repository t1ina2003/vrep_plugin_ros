"""autogenerated by genpy from vrep_common/ProximitySensorData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class ProximitySensorData(genpy.Message):
  _md5sum = "ca4cef31bef118238b22d9d3bc7e3089"
  _type = "vrep_common/ProximitySensorData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point32 detectedPoint
std_msgs/Int32 detectedObject
geometry_msgs/Point32 normalVector

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: std_msgs/Int32
int32 data
"""
  __slots__ = ['detectedPoint','detectedObject','normalVector']
  _slot_types = ['geometry_msgs/Point32','std_msgs/Int32','geometry_msgs/Point32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       detectedPoint,detectedObject,normalVector

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProximitySensorData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.detectedPoint is None:
        self.detectedPoint = geometry_msgs.msg.Point32()
      if self.detectedObject is None:
        self.detectedObject = std_msgs.msg.Int32()
      if self.normalVector is None:
        self.normalVector = geometry_msgs.msg.Point32()
    else:
      self.detectedPoint = geometry_msgs.msg.Point32()
      self.detectedObject = std_msgs.msg.Int32()
      self.normalVector = geometry_msgs.msg.Point32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3fi3f.pack(_x.detectedPoint.x, _x.detectedPoint.y, _x.detectedPoint.z, _x.detectedObject.data, _x.normalVector.x, _x.normalVector.y, _x.normalVector.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.detectedPoint is None:
        self.detectedPoint = geometry_msgs.msg.Point32()
      if self.detectedObject is None:
        self.detectedObject = std_msgs.msg.Int32()
      if self.normalVector is None:
        self.normalVector = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.detectedPoint.x, _x.detectedPoint.y, _x.detectedPoint.z, _x.detectedObject.data, _x.normalVector.x, _x.normalVector.y, _x.normalVector.z,) = _struct_3fi3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3fi3f.pack(_x.detectedPoint.x, _x.detectedPoint.y, _x.detectedPoint.z, _x.detectedObject.data, _x.normalVector.x, _x.normalVector.y, _x.normalVector.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.detectedPoint is None:
        self.detectedPoint = geometry_msgs.msg.Point32()
      if self.detectedObject is None:
        self.detectedObject = std_msgs.msg.Int32()
      if self.normalVector is None:
        self.normalVector = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.detectedPoint.x, _x.detectedPoint.y, _x.detectedPoint.z, _x.detectedObject.data, _x.normalVector.x, _x.normalVector.y, _x.normalVector.z,) = _struct_3fi3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3fi3f = struct.Struct("<3fi3f")
